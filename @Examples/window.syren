// this syren file (window.syren) will use styles from its corrosponding css
// file (window.css)

// window's objects, sets, lumps, and variables can all be refered to from any
// other .syren scipt (that executes after it) by prefixing it with "window."
// eg. calling `window.meter.content += " jk"` from global2nd.syren

// creates a new syren application called app
new Application testapp

// a set (function) that stores syren statements that can be executed later
// using the use statement
set initializeApplication {
	// set app's title by assigning to its 'title' field
	testapp.title = "Test Application"
	// set the metadata of the skin by calling the meta method of 'app')
	testapp.meta "zvava" "1.0" "MIT" "Test Application for Syren"
	// set size of skin by calling the size method of 'app')
	testapp.size 400 300
}

set initializeComponents {
	// creates a shape meter called background, add to testapp's meters immediately
	new ShapeMeter background > testapp
	background.shape = "rectangle 0, 0, #testapp.w#, #testapp.h#, 8 | fill color 1c1c1c | strokewidth 1.5 | stroke color 777777"

	// create a new text meter called meter
	new TextMeter meter
	meter.content = "Hello, World!"
	meter.pos 100 100
	// add to testapp's meter after setting its properties
	meter > testapp
}

// a lump is like a set but for rainmeter bangs, these can be used as
// "event handlers" for events
lump myRefreshHandler {
	log "Hello, World!"
	delay 1000
	log "piss pot"
}

// set the onRefreshAction for the app to the lump myRefreshHandler
testapp.onRefresh = myRefreshHandler
// equivalent to
testapponRefresh = [!log "Hello, World!"][!delay 1000][!log "piss pot"]

// run statements in these sets
use initializeApplication
use initializeComponents
